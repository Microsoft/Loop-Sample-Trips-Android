buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }
}
apply plugin: 'com.android.application'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

def mapsApiKey = TRIPTRACKER_APP_MAPS_KEY_PROP?: ""


android {
    compileSdkVersion 28

    defaultConfig {
        applicationId "com.microsoft.loop.triptracker"
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1011
        versionName "1.0.6"
        multiDexEnabled true

        buildConfigField 'String', 'APP_ID', '\"' + TRIPTRACKER_APP_ID_PROP + '\"'
        buildConfigField 'String', 'APP_TOKEN', '\"' + TRIPTRACKER_APP_TOKEN_PROP + '\"'
        buildConfigField 'String', 'LOGGLY_TOKEN', '\"' + LOGGLY_TOKEN + '\"'
        buildConfigField 'String', 'MIXPANEL_TOKEN', '\"' + TRIPTRACKER_MIXPANEL_TOKEN + '\"'
        manifestPlaceholders = [ mapsApiKey:mapsApiKey]

        buildConfigField "String", "ACRA_URL", '\"' + ACRA_URL_PROP + '\"'
        buildConfigField "String", "ACRA_PWD", '\"' + ACRA_PWD_PROP + '\"'
        buildConfigField "String", "ACRA_LOGIN", '\"' + ACRA_LOGIN_PROP + '\"'
    }
    dexOptions {
        dexInProcess = false
        javaMaxHeapSize "2g"
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

    }

    lintOptions {
        // set to true to turn off analysis progress reporting by lint
        quiet false
        // if true, stop the gradle build if errors are found
        abortOnError false
        // if true, only report errors
        ignoreWarnings false
        // project specific lint options
        lintConfig new File(rootProject.projectDir, "lint.xml")
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def relativeRootDir = output.packageApplication.outputDirectory.toPath()
                    .relativize(rootDir.toPath()).toFile()
            output.outputFileName = new File(
                    "$relativeRootDir/release",
                    output.outputFile.name)
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation 'junit:junit:4.12'

    implementation('ms.loop:loopsdk:2.1.0') { changing = true }
    implementation('com.crashlytics.sdk.android:crashlytics:2.6.2@aar') {
        transitive = true
    }
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'com.android.support:recyclerview-v7:28.0.0'
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
    implementation 'com.mixpanel.android:mixpanel-android:4.9.2'
    implementation 'com.google.android.gms:play-services-ads:17.0.0'
    implementation 'com.google.android.gms:play-services-auth:16.0.1'
    implementation 'com.google.android.gms:play-services-gcm:16.0.0'
    implementation 'com.google.android.gms:play-services:12.0.1'
    implementation 'ch.acra:acra:4.6.2'
}
